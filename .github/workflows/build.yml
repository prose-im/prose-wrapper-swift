name: Build and Release ProseSDK

on:
  workflow_dispatch:
    inputs:
      core_client_ref:
        description: 'prose-core-client branch/tag to build from'
        required: false
        default: 'master'
        type: string

env:
  CORE_CLIENT_REPO: prose-im/prose-core-client
  WRAPPER_REPO: prose-im/prose-wrapper-swift

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
      - name: Checkout wrapper repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: wrapper

      - name: Checkout core client repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.CORE_CLIENT_REPO }}
          ref: ${{ github.event.inputs.core_client_ref || 'master' }}
          path: core-client

      - name: Install system dependencies
        run: |
          # Required by libsignal
          brew install protobuf

      - name: Setup Rust
        run: |
          # Navigate to core-client directory where rust-toolchain.toml exists
          cd core-client

          # This will automatically install the toolchain specified in rust-toolchain.toml
          # and then add targets to that toolchain
          rustup target add x86_64-apple-darwin aarch64-apple-darwin x86_64-apple-ios aarch64-apple-ios-sim aarch64-apple-ios

          # Install bindgen-cli which is required by aws-lc-sys
          cargo install --force --locked bindgen-cli

          echo "Active toolchain:"
          rustup show active-toolchain
          echo "Installed Apple targets:"
          rustup target list --installed | grep apple

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep -m1 '^version = ' core-client/bindings/prose-sdk-ffi/Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Check if release already exists
        id: check_release
        run: |
          cd wrapper
          if gh release view "v${{ steps.version.outputs.version }}" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release v${{ steps.version.outputs.version }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Exit if release exists
        if: steps.check_release.outputs.exists == 'true'
        run: |
          echo "Release v${{ steps.version.outputs.version }} already exists. Exiting."
          exit 0

      - name: Build XCFramework
        run: |
          cd core-client
          cargo xtask swift build

      - name: Copy built framework to wrapper repo
        run: |
          cp -r core-client/bindings/prose-sdk-ffi/ProseSDK/* wrapper/

      - name: Create release archive
        run: |
          cd wrapper
          zip -r -y "ProseSDK-${{ steps.version.outputs.version }}.zip" ProseCore.xcframework

      - name: Calculate checksum
        id: checksum
        run: |
          cd wrapper
          CHECKSUM=$(swift package compute-checksum "ProseSDK-${{ steps.version.outputs.version }}.zip")
          echo "checksum=$CHECKSUM" >> $GITHUB_OUTPUT
          echo "Checksum: $CHECKSUM"

      - name: Update Package.swift
        run: |
          cd wrapper
          cat > Package.swift << 'EOF'
          // swift-tools-version:5.5
          // The swift-tools-version declares the minimum version of Swift required to build this package.
          // Swift Package: ProseSDK
          import PackageDescription

          let package = Package(
              name: "ProseSDK",
              platforms: [
                  .iOS(.v13),
                  .macOS(.v10_15)
              ],
              products: [
                  .library(
                      name: "ProseSDK",
                      targets: ["ProseSDK"]
                  )
              ],
              dependencies: [ ],
              targets: [
                  .binaryTarget(
                      name: "ProseCore",
                      url: "https://github.com/${{ env.WRAPPER_REPO }}/releases/download/v${{ steps.version.outputs.version }}/ProseSDK-${{ steps.version.outputs.version }}.zip",
                      checksum: "${{ steps.checksum.outputs.checksum }}"
                  ),
                  .target(
                      name: "ProseSDK",
                      dependencies: [
                          .target(name: "ProseCore")
                      ]
                  ),
              ]
          )
          EOF

      - name: Commit updated Package.swift and Sources
        run: |
          cd wrapper
          git add Package.swift Sources/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update Package.swift and Sources for v${{ steps.version.outputs.version }}"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        id: create_release
        run: |
          cd wrapper
          gh release create "v${{ steps.version.outputs.version }}" \
            "ProseSDK-${{ steps.version.outputs.version }}.zip" \
            --title "ProseSDK v${{ steps.version.outputs.version }}" \
            --notes "ProseSDK release v${{ steps.version.outputs.version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
